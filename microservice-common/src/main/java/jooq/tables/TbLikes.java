/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Indexes;
import jooq.Keys;
import jooq.Public;
import jooq.tables.records.TbLikesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbLikes extends TableImpl<TbLikesRecord> {

    private static final long serialVersionUID = 237934446;

    /**
     * The reference instance of <code>public.tb_likes</code>
     */
    public static final TbLikes TB_LIKES = new TbLikes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbLikesRecord> getRecordType() {
        return TbLikesRecord.class;
    }

    /**
     * The column <code>public.tb_likes.id</code>.
     */
    public final TableField<TbLikesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tb_likes_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.tb_likes.authorid</code>.
     */
    public final TableField<TbLikesRecord, String> AUTHORID = createField("authorid", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_likes.lid</code>.
     */
    public final TableField<TbLikesRecord, String> LID = createField("lid", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_likes.comment_id</code>.
     */
    public final TableField<TbLikesRecord, String> COMMENT_ID = createField("comment_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_likes.storyid</code>.
     */
    public final TableField<TbLikesRecord, String> STORYID = createField("storyid", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_likes.possibilitysensitive</code>.
     */
    public final TableField<TbLikesRecord, Integer> POSSIBILITYSENSITIVE = createField("possibilitysensitive", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_likes.lang</code>.
     */
    public final TableField<TbLikesRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>public.tb_likes.entities</code>.
     */
    public final TableField<TbLikesRecord, String> ENTITIES = createField("entities", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tb_likes.authorname</code>.
     */
    public final TableField<TbLikesRecord, String> AUTHORNAME = createField("authorname", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_likes.createdon</code>.
     */
    public final TableField<TbLikesRecord, String> CREATEDON = createField("createdon", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.tb_likes.status</code>.
     */
    public final TableField<TbLikesRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * Create a <code>public.tb_likes</code> table reference
     */
    public TbLikes() {
        this(DSL.name("tb_likes"), null);
    }

    /**
     * Create an aliased <code>public.tb_likes</code> table reference
     */
    public TbLikes(String alias) {
        this(DSL.name(alias), TB_LIKES);
    }

    /**
     * Create an aliased <code>public.tb_likes</code> table reference
     */
    public TbLikes(Name alias) {
        this(alias, TB_LIKES);
    }

    private TbLikes(Name alias, Table<TbLikesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbLikes(Name alias, Table<TbLikesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TbLikes(Table<O> child, ForeignKey<O, TbLikesRecord> key) {
        super(child, key, TB_LIKES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TB_LIKES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TbLikesRecord, Long> getIdentity() {
        return Keys.IDENTITY_TB_LIKES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TbLikesRecord> getPrimaryKey() {
        return Keys.TB_LIKES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TbLikesRecord>> getKeys() {
        return Arrays.<UniqueKey<TbLikesRecord>>asList(Keys.TB_LIKES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbLikes as(String alias) {
        return new TbLikes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbLikes as(Name alias) {
        return new TbLikes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbLikes rename(String name) {
        return new TbLikes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbLikes rename(Name name) {
        return new TbLikes(name, null);
    }
}
