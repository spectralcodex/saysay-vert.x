/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.time.OffsetTime;
import java.util.Collection;

import javax.annotation.Generated;

import jooq.tables.TbSector;
import jooq.tables.records.TbSectorRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbSectorDao extends AbstractAsyncVertxDAO<TbSectorRecord, jooq.tables.pojos.TbSector, Long, Future<List<jooq.tables.pojos.TbSector>>, Future<jooq.tables.pojos.TbSector>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbSectorRecord,jooq.tables.pojos.TbSector,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbSectorDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbSector.TB_SECTOR, jooq.tables.pojos.TbSector.class, new AsyncClassicQueryExecutor<TbSectorRecord,jooq.tables.pojos.TbSector,Long>(configuration,delegate,jooq.tables.pojos.TbSector::new, TbSector.TB_SECTOR));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbSector object) {
        return object.getId();
    }

    /**
     * Find records that have <code>sid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbSector>> findManyBySid(Collection<String> values) {
        return findManyByCondition(TbSector.TB_SECTOR.SID.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbSector>> findManyByName(Collection<String> values) {
        return findManyByCondition(TbSector.TB_SECTOR.NAME.in(values));
    }

    /**
     * Find records that have <code>created_by IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbSector>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(TbSector.TB_SECTOR.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbSector>> findManyByCreatedAt(Collection<OffsetTime> values) {
        return findManyByCondition(TbSector.TB_SECTOR.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>description IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbSector>> findManyByDescription(Collection<String> values) {
        return findManyByCondition(TbSector.TB_SECTOR.DESCRIPTION.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<TbSectorRecord,jooq.tables.pojos.TbSector,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbSectorRecord,jooq.tables.pojos.TbSector,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
