/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.time.OffsetDateTime;
import java.util.Collection;

import javax.annotation.Generated;

import jooq.tables.TbUser;
import jooq.tables.records.TbUserRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbUserDao extends AbstractAsyncVertxDAO<TbUserRecord, jooq.tables.pojos.TbUser, Long, Future<List<jooq.tables.pojos.TbUser>>, Future<jooq.tables.pojos.TbUser>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbUserRecord,jooq.tables.pojos.TbUser,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbUserDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbUser.TB_USER, jooq.tables.pojos.TbUser.class, new AsyncClassicQueryExecutor<TbUserRecord,jooq.tables.pojos.TbUser,Long>(configuration,delegate,jooq.tables.pojos.TbUser::new, TbUser.TB_USER));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbUser object) {
        return object.getId();
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByRoleId(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.ROLE_ID.in(values));
    }

    /**
     * Find records that have <code>first_name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByFirstName(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.FIRST_NAME.in(values));
    }

    /**
     * Find records that have <code>last_name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByLastName(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.LAST_NAME.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByEmail(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.EMAIL.in(values));
    }

    /**
     * Find records that have <code>mobile IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByMobile(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.MOBILE.in(values));
    }

    /**
     * Find records that have <code>hashed_password IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByHashedPassword(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.HASHED_PASSWORD.in(values));
    }

    /**
     * Find records that have <code>salt IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyBySalt(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.SALT.in(values));
    }

    /**
     * Find records that have <code>profile_pic IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByProfilePic(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.PROFILE_PIC.in(values));
    }

    /**
     * Find records that have <code>background_info IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByBackgroundInfo(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.BACKGROUND_INFO.in(values));
    }

    /**
     * Find records that have <code>website IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByWebsite(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.WEBSITE.in(values));
    }

    /**
     * Find records that have <code>gps_location IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByGpsLocation(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.GPS_LOCATION.in(values));
    }

    /**
     * Find records that have <code>dob IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByDob(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.DOB.in(values));
    }

    /**
     * Find records that have <code>other_info IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByOtherInfo(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.OTHER_INFO.in(values));
    }

    /**
     * Find records that have <code>created_by IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>created_on IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCreatedOn(Collection<OffsetDateTime> values) {
        return findManyByCondition(TbUser.TB_USER.CREATED_ON.in(values));
    }

    /**
     * Find records that have <code>role_name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByRoleName(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.ROLE_NAME.in(values));
    }

    /**
     * Find records that have <code>uid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByUid(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.UID.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<TbUserRecord,jooq.tables.pojos.TbUser,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbUserRecord,jooq.tables.pojos.TbUser,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
