/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.time.OffsetDateTime;
import java.util.Collection;

import javax.annotation.Generated;

import jooq.tables.TbComment;
import jooq.tables.records.TbCommentRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbCommentDao extends AbstractAsyncVertxDAO<TbCommentRecord, jooq.tables.pojos.TbComment, Long, Future<List<jooq.tables.pojos.TbComment>>, Future<jooq.tables.pojos.TbComment>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbCommentRecord,jooq.tables.pojos.TbComment,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbCommentDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbComment.TB_COMMENT, jooq.tables.pojos.TbComment.class, new AsyncClassicQueryExecutor<TbCommentRecord,jooq.tables.pojos.TbComment,Long>(configuration,delegate,jooq.tables.pojos.TbComment::new, TbComment.TB_COMMENT));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbComment object) {
        return object.getId();
    }

    /**
     * Find records that have <code>author_id IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByAuthorId(Collection<String> values) {
        return findManyByCondition(TbComment.TB_COMMENT.AUTHOR_ID.in(values));
    }

    /**
     * Find records that have <code>cid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByCid(Collection<String> values) {
        return findManyByCondition(TbComment.TB_COMMENT.CID.in(values));
    }

    /**
     * Find records that have <code>story_id IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByStoryId(Collection<String> values) {
        return findManyByCondition(TbComment.TB_COMMENT.STORY_ID.in(values));
    }

    /**
     * Find records that have <code>possibility_sensitive IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByPossibilitySensitive(Collection<Integer> values) {
        return findManyByCondition(TbComment.TB_COMMENT.POSSIBILITY_SENSITIVE.in(values));
    }

    /**
     * Find records that have <code>lang IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByLang(Collection<String> values) {
        return findManyByCondition(TbComment.TB_COMMENT.LANG.in(values));
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByCreatedAt(Collection<OffsetDateTime> values) {
        return findManyByCondition(TbComment.TB_COMMENT.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>entities IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByEntities(Collection<String> values) {
        return findManyByCondition(TbComment.TB_COMMENT.ENTITIES.in(values));
    }

    /**
     * Find records that have <code>author_name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbComment>> findManyByAuthorName(Collection<String> values) {
        return findManyByCondition(TbComment.TB_COMMENT.AUTHOR_NAME.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<TbCommentRecord,jooq.tables.pojos.TbComment,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbCommentRecord,jooq.tables.pojos.TbComment,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
