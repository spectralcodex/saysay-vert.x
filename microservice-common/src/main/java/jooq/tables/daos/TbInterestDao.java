/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.Generated;

import jooq.tables.TbInterest;
import jooq.tables.records.TbInterestRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbInterestDao extends AbstractAsyncVertxDAO<TbInterestRecord, jooq.tables.pojos.TbInterest, Long, Future<List<jooq.tables.pojos.TbInterest>>, Future<jooq.tables.pojos.TbInterest>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbInterestRecord,jooq.tables.pojos.TbInterest,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbInterestDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbInterest.TB_INTEREST, jooq.tables.pojos.TbInterest.class, new AsyncClassicQueryExecutor<TbInterestRecord,jooq.tables.pojos.TbInterest,Long>(configuration,delegate,jooq.tables.pojos.TbInterest::new, TbInterest.TB_INTEREST));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbInterest object) {
        return object.getId();
    }

    /**
     * Find records that have <code>iid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbInterest>> findManyByIid(Collection<String> values) {
        return findManyByCondition(TbInterest.TB_INTEREST.IID.in(values));
    }

    /**
     * Find records that have <code>description IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbInterest>> findManyByDescription(Collection<String> values) {
        return findManyByCondition(TbInterest.TB_INTEREST.DESCRIPTION.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbInterest>> findManyByName(Collection<String> values) {
        return findManyByCondition(TbInterest.TB_INTEREST.NAME.in(values));
    }

    /**
     * Find records that have <code>createdby IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbInterest>> findManyByCreatedby(Collection<String> values) {
        return findManyByCondition(TbInterest.TB_INTEREST.CREATEDBY.in(values));
    }

    /**
     * Find records that have <code>createdon IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbInterest>> findManyByCreatedon(Collection<Timestamp> values) {
        return findManyByCondition(TbInterest.TB_INTEREST.CREATEDON.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<TbInterestRecord,jooq.tables.pojos.TbInterest,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbInterestRecord,jooq.tables.pojos.TbInterest,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
