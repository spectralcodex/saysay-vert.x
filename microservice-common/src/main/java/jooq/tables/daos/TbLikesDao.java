/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.util.Collection;

import javax.annotation.Generated;

import jooq.tables.TbLikes;
import jooq.tables.records.TbLikesRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbLikesDao extends AbstractAsyncVertxDAO<TbLikesRecord, jooq.tables.pojos.TbLikes, Long, Future<List<jooq.tables.pojos.TbLikes>>, Future<jooq.tables.pojos.TbLikes>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbLikesRecord,jooq.tables.pojos.TbLikes,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbLikesDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbLikes.TB_LIKES, jooq.tables.pojos.TbLikes.class, new AsyncClassicQueryExecutor<TbLikesRecord,jooq.tables.pojos.TbLikes,Long>(configuration,delegate,jooq.tables.pojos.TbLikes::new, TbLikes.TB_LIKES));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbLikes object) {
        return object.getId();
    }

    /**
     * Find records that have <code>authorid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByAuthorid(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.AUTHORID.in(values));
    }

    /**
     * Find records that have <code>lid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByLid(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.LID.in(values));
    }

    /**
     * Find records that have <code>comment_id IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByCommentId(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.COMMENT_ID.in(values));
    }

    /**
     * Find records that have <code>storyid IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByStoryid(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.STORYID.in(values));
    }

    /**
     * Find records that have <code>possibilitysensitive IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByPossibilitysensitive(Collection<Integer> values) {
        return findManyByCondition(TbLikes.TB_LIKES.POSSIBILITYSENSITIVE.in(values));
    }

    /**
     * Find records that have <code>lang IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByLang(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.LANG.in(values));
    }

    /**
     * Find records that have <code>entities IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByEntities(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.ENTITIES.in(values));
    }

    /**
     * Find records that have <code>authorname IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByAuthorname(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.AUTHORNAME.in(values));
    }

    /**
     * Find records that have <code>createdon IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByCreatedon(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.CREATEDON.in(values));
    }

    /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbLikes>> findManyByStatus(Collection<String> values) {
        return findManyByCondition(TbLikes.TB_LIKES.STATUS.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<TbLikesRecord,jooq.tables.pojos.TbLikes,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbLikesRecord,jooq.tables.pojos.TbLikes,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
