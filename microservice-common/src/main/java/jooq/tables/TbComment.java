/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Indexes;
import jooq.Keys;
import jooq.Public;
import jooq.tables.records.TbCommentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbComment extends TableImpl<TbCommentRecord> {

    private static final long serialVersionUID = 475558749;

    /**
     * The reference instance of <code>public.tb_comment</code>
     */
    public static final TbComment TB_COMMENT = new TbComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbCommentRecord> getRecordType() {
        return TbCommentRecord.class;
    }

    /**
     * The column <code>public.tb_comment.id</code>.
     */
    public final TableField<TbCommentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tb_comment_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.tb_comment.author_id</code>.
     */
    public final TableField<TbCommentRecord, String> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_comment.comment_id</code>.
     */
    public final TableField<TbCommentRecord, String> COMMENT_ID = createField("comment_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_comment.story_id</code>.
     */
    public final TableField<TbCommentRecord, String> STORY_ID = createField("story_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_comment.possibility_sensitive</code>.
     */
    public final TableField<TbCommentRecord, Integer> POSSIBILITY_SENSITIVE = createField("possibility_sensitive", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_comment.lang</code>.
     */
    public final TableField<TbCommentRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>public.tb_comment.created_at</code>.
     */
    public final TableField<TbCommentRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.tb_comment.entries</code>.
     */
    public final TableField<TbCommentRecord, String> ENTRIES = createField("entries", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.tb_comment</code> table reference
     */
    public TbComment() {
        this(DSL.name("tb_comment"), null);
    }

    /**
     * Create an aliased <code>public.tb_comment</code> table reference
     */
    public TbComment(String alias) {
        this(DSL.name(alias), TB_COMMENT);
    }

    /**
     * Create an aliased <code>public.tb_comment</code> table reference
     */
    public TbComment(Name alias) {
        this(alias, TB_COMMENT);
    }

    private TbComment(Name alias, Table<TbCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbComment(Name alias, Table<TbCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TbComment(Table<O> child, ForeignKey<O, TbCommentRecord> key) {
        super(child, key, TB_COMMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TB_COMMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TbCommentRecord, Long> getIdentity() {
        return Keys.IDENTITY_TB_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TbCommentRecord> getPrimaryKey() {
        return Keys.TB_COMMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TbCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<TbCommentRecord>>asList(Keys.TB_COMMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbComment as(String alias) {
        return new TbComment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbComment as(Name alias) {
        return new TbComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbComment rename(String name) {
        return new TbComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbComment rename(Name name) {
        return new TbComment(name, null);
    }
}
